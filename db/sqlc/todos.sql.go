// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: todos.sql

package db

import (
	"context"
	"time"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
  group_id,
  todo_name,
  deadline
) VALUES (
    $1, $2, $3
) RETURNING id, group_id, todo_name, created_at, status, deadline
`

type CreateTodoParams struct {
	GroupID  int64     `json:"group_id"`
	TodoName string    `json:"todo_name"`
	Deadline time.Time `json:"deadline"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo, arg.GroupID, arg.TodoName, arg.Deadline)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.TodoName,
		&i.CreatedAt,
		&i.Status,
		&i.Deadline,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, group_id, todo_name, created_at, status, deadline FROM todos WHERE group_id = $1
`

func (q *Queries) GetTodos(ctx context.Context, groupID int64) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.TodoName,
			&i.CreatedAt,
			&i.Status,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
