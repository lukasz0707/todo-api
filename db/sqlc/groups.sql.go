// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: groups.sql

package db

import (
	"context"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO groups (
  group_name
) VALUES (
    $1
)RETURNING id, group_name
`

func (q *Queries) CreateGroup(ctx context.Context, groupName string) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup, groupName)
	var i Group
	err := row.Scan(&i.ID, &i.GroupName)
	return i, err
}

const getGroupsByUserID = `-- name: GetGroupsByUserID :many
SELECT id, group_name FROM groups WHERE id IN (SELECT group_id FROM users_groups WHERE user_id = $1)
`

func (q *Queries) GetGroupsByUserID(ctx context.Context, userID int64) ([]Group, error) {
	rows, err := q.db.QueryContext(ctx, getGroupsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Group{}
	for rows.Next() {
		var i Group
		if err := rows.Scan(&i.ID, &i.GroupName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
